%\VignetteIndexEntry{phyloseq basics}
%\VignetteKeywords{access, subset, merge, build} 
%\VignettePackage{phyloseq}

%
% NOTE -- ONLY EDIT THE .Rnw FILE!!!  The .tex file is
% likely to be overwritten.
%
\documentclass[10pt]{article}

\usepackage{times}
\usepackage{hyperref}
\usepackage{caption}

\textwidth=6.5in
\textheight=8.5in
%\parskip=.3cm
\oddsidemargin=-.1in
\evensidemargin=-.1in
\headheight=-.3in

\newcommand{\scscst}{\scriptscriptstyle}
\newcommand{\scst}{\scriptstyle}

\newcommand{\R}{{\textsf{R}}}
\newcommand{\code}[1]{{\texttt{#1}}}
\newcommand{\term}[1]{{\emph{#1}}}
\newcommand{\Rpackage}[1]{\textsf{#1}}
\newcommand{\Rfunction}[1]{\texttt{#1}}
\newcommand{\Robject}[1]{\texttt{#1}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Rfunarg}[1]{{\textit{#1}}}

\bibliographystyle{plainnat} 
 
\begin{document}
%\setkeys{Gin}{width=0.55\textwidth}

\title{Basic storage, access, and manipulation of phylogenetic sequencing data with \emph{phyloseq}}
\author{Paul J. McMurdie \\
  Holmes Group \\
  Statistics Department, Stanford University\\
  Stanford, CA}
\date{\today}
\maketitle

\tableofcontents

\clearpage
\section{Introduction}
There are already several ecology and phylogenetic packages available in R, including the adephylo, vegan, ade4, picante, ape, phangorn, phylobase, and OTUbase packages. These can already take advantage of many of the powerful statistical and graphics tools available in R. However, at present a user must devise their own methods for parsing the output of their favorite OTU clustering application, and, as a consequence, there is also no standard within Bioconductor (or R generally) for storing or sharing the suite of related data objects that describe a phylogenetic sequencing project. The phyloseq package\footnote{Throughout this vignette we use regular or \emph{italics} font for packages/applications with names that are capitalized or uncapitalized, respectively. We further use a \texttt{courier} style font for R code, including function and class names.} seeks to address these issues by providing a related set of S4 classes that internally manage the handling tasks associated with organizing, linking, storing, and analyzing phylogenetic sequencing data. \emph{phyloseq} additionally provides some convenience wrappers for input from common clustering applications, common analysis pipelines, and native implementation of methods that are not available in other R packages.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Load phyloseq and Import Data.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Load \emph{phyloseq} and import data}\label{sec:load}
\subsection{Load \emph{phyloseq}}
To use \emph{phyloseq} in a new R session, it will have to be loaded. This can be done in your package manager, or at the command line using the \code{library()} command:
<<>>=
  library("phyloseq")
@

\subsection{Import data}\label{sec:import}
An important feature of \emph{phyloseq} are methods for importing phylogenetic sequencing data from common taxonomic clustering pipelines. These methods take file pathnames as input, read and parse those files, and return a single object that contains all of the data. 

As an example, the following lines of code would create a \code{phyloseqTaxTree} object (see Appendix~\ref{sec:app-classes} for class definitions) from files on your computer, had they been created by the the QIIME pipeline. 

%readQiime_directory_structure.png

<<eval=FALSE>>=
  otufilename <- "../data/ex1_otutable.txt"
  mapfilename <- "../data/ex1_samplemap.txt"
  trefilename <- "../data/ex1_tree.tre"
  ex1 <- readQiime(otufilename, mapfilename, trefilename)
@

An example data set is included in \emph{phyloseq}, called ``\code{ex1}''. It is derived from a preliminary investigation of human intestinal microbiome. The user need only invoke the \code{data()} command to bring this object into the environment:

<<>>=
data(ex1)
@

\clearpage
\subsection{phyloseq object summaries}
In small font, the following is the summary of object \code{ex1} that prints to the terminal. These summaries are consistent among all object classes defined by \emph{phyloseq}. Although the components of \code{ex1} have many thousands of elements, the command-line returns only a short summary of each by default. This encourages you to check that an object is still what you expect, without needing to let thousands of elements scroll across the terminal. In the cases in which you do want to see all elements of an object, use \code{print()}.

\begin{scriptsize}
<<>>=
ex1
@
\end{scriptsize}

\clearpage
\subsection{Convert raw data to phyloseq components}
Suppose you have already imported raw data from an experiment into \code{R}, and their indices are labeled correctly. How do you get \emph{phyloseq} to recognize these tables as the appropriate class of data? And further combine them together? Table~\ref{table:build} lists key functions for converting these core data formats into specific component data objects recognized by \emph{phyloseq}. These will also

\begin{table}[ht]
\begin{center}
\begin{tabular}{lll}
\multicolumn{3}{l}{Functions for building component data objects}\\
\hline
Function                    & Input Class      & Output Description \\
\hline
\Rfunction{otuTable}        & numeric matrix   & \code{otuTable} object storing taxa abundance \\
\Rfunction{otuTable}        & data.frame       & \code{otuTable} object storing taxa abundance \\
\Rfunction{sampleMap}       & data.frame       & \code{sampleMap} object storing sample variables \\
\Rfunction{taxTab}          & character string & \code{taxonomyTable} object storing taxonomic identities \\
\Rfunction{tre}             & file path char   & phylo4-class tree, read from file \\
\Rfunction{tre}             & phylo-class tree & phylo4-class tree, converted from argument \\
\Rfunction{read.table}      & table file path  & A matrix or data.frame (Std \R core function)  \\
\Rfunction{read.tree}       & Newick file path & phylo-class tree object (ape) \\
\Rfunction{read.nexus}      & Nexus file path  & phylo-class tree object (ape) \\
\Rfunction{readNexus}       & Nexus file path  & phylo4-class tree object (phylobase) \\
& & \\

\multicolumn{3}{l}{Functions for building complex data objects}\\
\hline
Function                    & Input Class                 & Output Description \\
\hline
\Rfunction{phyloseq}        & 2 or more component objects & Complete experiment object \\
\Rfunction{merge{\textunderscore}phyloseq}  & 2 or more component/complex objects & Complete experiment object \\
\hline
\end{tabular}
\end{center}
\caption{ Constructors: functions for building \emph{phyloseq} objects.}
\label{table:build}
\end{table}

The following example illustrates using the constructor methods for component data tables. 
<<eval=FALSE>>=
otu1 <- otuTable(raw_abundance_matrix, speciesAreRows=FALSE)
sam1 <- sampleMap(raw_sample_data.frame) 
tax1 <- taxTab(raw_taxonomy_matrix)
tre1 <- read.nexus(my_nexus_file)
@

\subsection{\code{phyloseq()} function: building complex phyloseq objects}
Once you've converted the data tables to their appropriate class, combining them into one object requires only one additional function call, \Rfunction{phyloseq()}:
<<eval=FALSE>>=
ex1b <- phyloseq(my_otuTable, my_sampleMap, my_taxonomyTable, my_tree)
@

You do not need to have all four data types in the example above in order to combine them. The \code{phyloseq()} method will create an object of whichever class is appropriate, according to the data you provide. Downstream analysis methods will know which class and which data types are required, and throw a warning if something is missing. For most downstream methods you will only need to supply the combined object returned by \code{phyloseq()} (usually as the first argument) and appropriate options.
<<eval=FALSE>>=
ex1c <- phyloseq(my_otuTable, my_sampleMap)
@

We refer to these classes that contain more than one component data type as \emph{higher-order} classes. Whenever an instance of these classes is created by \emph{phyloseq} --- for example, when we use the \code{readQiime()} function to import data, or combine manually imported tables using the \code{phyloseq()} --- the row and column indices representing taxa or samples are internally checked/trimmed for compatibility, such that all component data describe exactly the same species and samples.

\subsection{\code{merge{\textunderscore}phyloseq()} function: merge multiple phyloseq objects}
What if you have multiple objects describing parts of the same experimental project (say, because they came from different files)? What if you had already built a combined object for the earlier trials with the \code{phyloseq()} function, but now want to add additional data tables to that new object? 

For all of these merging situations, the suggested function is \code{merge{\textunderscore}phyloseq()}.


\clearpage
\section{Accessor functions}
Once you have a phyloseq object available, many accessor functions are available to query aspects of the data set. The function name and its purpose are summarized in Table~\ref{table:access}.

\begin{table}[ht]
\begin{center}
\begin{tabular}{l|l}
\hline
Function                    & Description \\
\hline
\Rfunction{[}               & Standard extraction operator. works on otuTable, sampleMap, and taxonomyTable \\
\Rfunction{access}          & General slot accessor function for phyloseq-package \\
\Rfunction{getslots.phyloseq} & Return the slot names of phyloseq objects \\
\Rfunction{getSpecies}      & Returns the abundance values of sample `i' for all species in `x' \\
\Rfunction{getSamples}      & Returns the abundance values of species `i' for all samples in `x' \\
\Rfunction{nsamples}        & Get the number of samples described by an object \\
\Rfunction{nspecies}        & Get the number of species (taxa) described by an object \\
\Rfunction{otuSam}          & Subset just the otuSam portion of a H.O. object \\
\Rfunction{otuTree}         & Subset just the otuTree portion of a H.O. object \\
\Rfunction{otuTax}          & Subset just the otuTax portion of a H.O. object \\
\Rfunction{otuSamTax}       & Subset just the otuSamTax portion of a H.O. object \\
\Rfunction{otuSamTree}      & Subset just the otuSamTree portion of a H.O. object \\
\Rfunction{otuSamTaxTree}   & Subset just the otuSamTaxTree portion of a H.O. object \\
\Rfunction{otuTable}        & Build or access otuTable objects \\
\Rfunction{sampleMap}       & Build or access sampleMap objects \\
\Rfunction{taxTab}          & Build or access taxTab objects \\
\Rfunction{tre}             & Access the tree contained in a phyloseq object \\
\Rfunction{sample.names}    & Return the names of the samples described by an object \\
\Rfunction{species.names}   & Return the names of the species described by an object \\
\Rfunction{sampleSums}      & Returns the total number of individuals observed from each sample \\
\Rfunction{speciesSums}     & Returns the total number of individuals observed from each species \\
\Rfunction{speciesAreRows}  & returns the orientation of the abundance table \\
\hline
\end{tabular}
\end{center}
\caption{ Accessor functions for \emph{phyloseq} objects.}
\label{table:access}
\end{table}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Data Trimming.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Trimming, filtering phyloseq data}\label{sec:trim}
Trimming high-throughput phylogenetic sequencing data can be useful, or even necessary, for certain types of analyses. However, it is important that the original data always be available for reference and reproducibility; and that the methods used for trimming be transparent to others, so they can perform the same trimming or filtering steps on the same or related data.

To facilitate this, \emph{phyloseq} contains many ways to trim/filter the data from a phylogenetic sequencing project. Because matching indices for taxa and samples is strictly enforced, subsetting one of the data components automatically subsets the corresponding indices from the others. Variables holding trimmed versions of your original data can be declared, and further trimmed, without losing track of the original data.

<<echo=FALSE>>=
topN <- 20
@
For example, lets make a new object that only holds the most abundant \Sexpr{topN} taxa in the experiment. To accomplish this, we will use the \code{prune{\textunderscore}species()} function.
<<>>=
data(ex1)
most_abundant_taxa <- sort(speciesSums(ex1), TRUE)[1:topN]
ex2 <- prune_species(names(most_abundant_taxa), ex1)
@

An alternative, replacement-style approach is also supported by \emph{phyloseq}:
<<eval=FALSE>>=
species.names(ex2) <- names(most_abundant_taxa)
@

Now we can ask the question, ``what taxonomic Family are these OTUs?'' (Subsetting still returns a taxonomyTable object, which is summarized. We will need to convert to a vector)

\begin{scriptsize}
<<>>=
topFamilies <- taxTab(ex2)[, "Family"]
as(topFamilies, "vector")
@
\end{scriptsize}

Can subset directly to keep only \emph{Gender A}, for example
<<>>=
ex3 <- ex1
sampleMap(ex3) <- subset(sampleMap(ex3), Gender=="A")
@
\begin{scriptsize}
<<>>=
ex3
@
\end{scriptsize}

Or by specific taxonomic category
<<>>=
ex4 <- ex1
species.names(ex4) <- species.names(ex1)[taxTab(ex1)[, "Phylum"]=="Firmicutes"]
@
\begin{scriptsize}
<<>>=
ex4
@
\end{scriptsize}

Can also randomly subset, for example a random subset of 100 OTUs
<<>>=
ex5 <- ex1
species.names(ex5) <- sample(species.names(ex5), 100, replace=FALSE)
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Transform Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Transform abundance data}\label{sec:transform}
Sample-wise transformation can be achieved with the \code{transformsamplecounts()} function. It requires two arguments, (1) the \emph{phyloseq} object that you want to transform, and the function that you want to use to perform the transformation. Any arbitrary function can be provided as the second argument, as long as it returns a numeric vector with the same length as its input. In the following trivial example, we create a second object, \code{ex2}, that has been ``transformed'' by the identity function such that it is actually identical to \code{ex1}.

<<eval=FALSE>>=
data(ex1)
ex2 <- transformsamplecounts(ex1, I)
@

For certain kinds of analyis we may want to transform the abundance data. For example, for RDA we want to transform abundance counts to within-sample ranks, and to further include a threshold beyond which all taxa receive the same rank value. The ranking for each sample is performed independently, so that the rank of a particular taxa within a particular sample is not influenced by that sample's total quantity of sequencing relative to the other samples in the project. 

The following example shows how to perform such a thresholded-rank transformation of the abundance table in the complex \emph{phyloseq} object \code{ex1} with an arbitrary threshold of 500.

<<>>=
ex4  <- transformsamplecounts(ex1, threshrankfun(500))
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Phylogenetic Smoothing.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Phylogenetic smoothing}\label{sec:glom}
\subsection{\code{taxglom()} method}
Suppose we are skeptical about the importance of species-level distinctions in our dataset. For this scenario, \emph{phyloseq} includes a taxonomic-agglommeration method, \code{taxglom()}, which merges taxa of the same taxonomic category for a user-specified taxonomic level. In the following code, we merge all taxa of the same Genus, and store that new object as \code{ex6}.

<<eval=FALSE>>=
ex6 <- taxglom(ex1, taxlevel="Genus")
@

\subsection{\code{tipglom()} method}
Similarly, our original example object (\code{ex1}) also contains a phlyogenetic tree corresponding to each OTU, which we could also use as a means to merge taxa in our dataset that are closely related. In this case, we specify a threshold patristic distance. Taxa more closely related than this threshold are merged. This is especially useful when a dataset has many taxa that lack a taxonomic assignment at the level you want to investigate, a problem when using \code{taxglom()}. Note that for datasets with a large number of taxa, \code{taxglom} will be noticeably faster than \code{tipglom}. Also, keep in mind that \code{tipglom} requires that its first argument be an object that contains a tree, while \code{taxglom} instead requires a \code{taxonomyTable} (See Appendix~\ref{sec:app-classes}).

<<eval=FALSE>>=
ex7 <- tipglom(ex1, speciationMinLength = 0.05)
@
Command output not provided here to save time during compilation of the vignette. The user is encouraged to try this out on your dataset, or even this example, if interested. It may take a while to run on the full, untrimmed data.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Appendices
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\appendix

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Classes in phyloseq.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{\emph{phyloseq} classes}\label{sec:app-classes}

The class structure in the \emph{phyloseq} package follows the inheritance diagram shown in Fig.~\ref{fig:phyloseqclasses}. The \emph{phyloseq} package contains multiple inherited classes with incremental complexity so that methods can be extended to handle exactly the data types that are present in a particular object. Currently, \emph{phyloseq} uses 4 core data classes. They are the taxonomic abundance table (\code{otuTable}), a table of sample data (\code{sampleMap}), a table of taxonomic descriptors (\code{taxonomyTable}), and a phylogenetic tree (\code{phylo4}, \emph{phylobase} package). The \code{otuTable} class can be considered the central data type, as it directly represents the number and type of sequences observed in each sample. \code{otuTable} extends the numeric matrix class in the \R{} base, and has a few additonal feature slots. The most important of these feature slots is the \code{speciesAreRows} slot, which holds a single logical that indicates whether the table is oriented with taxa as rows (as in the \emph{genefilter} package in Bioconductor~\cite{Bioconductor}) or with taxa as columns (as in \emph{vegan} and \emph{picante} packages). In \emph{phyloseq} methods, as well as its extensions of methods in other packages, the \code{speciesAreRows} value is checked to ensure proper orientation of the otuTable. A \emph{phyloseq} user is only required to specify the \code{otuTable} orientation during initialization, following which all handling is internal. 

The \code{sampleMap} class directly inherits \R's \code{data.frame} class, and thus effectively stores both categorical and numerical data about each sample. The orientation of a \code{data.frame} in this context requires that samples/trials are rows, and variables are columns (consistent with \emph{vegan} and other packages). The \code{taxonomyTable} class directly inherits the \code{matrix} class, and is oriented such that rows are taxa (e.g. \emph{species}) and columns are taxonomic levels (e.g. \emph{Phylum}). 

We use the term ``higher-order classes'' for those that contain two or more of the previously-described core data classes. We assume that \emph{phyloseq} users will be interested in analyses that utilize their abundance counts derived from the phylogenetic sequencing data, and so all higher-order classes contain an \code{otuTable} slot. There are a number of common methods that require either an \code{otuTable} and \code{sampleMap} combination, or an \code{otuTable} and phylogenetic tree combination. These methods can operate on instances of the \code{otuSam} or \code{otuTree} classes, respectively, or their children. In addition, a virtual class has been defined, \code{phyloseqFather}, that is inherited by all other higher-order classes. In many cases a method will only need to be defined for one of these classes in order to work properly for other relevant classes as well. 

\begin{figure}
\begin{center}
\includegraphics[width=0.7\textwidth]{phyloseq_classes_2_clipped.pdf}
\caption[]{ {\textbf Classes and inheritance in the \emph{phyloseq} package}. Core data classes are shown with grey fill and rounded corners. The class name and its slots are shown with red- or blue-shaded text, respectively. Inheritance is indicated graphically by arrows. Lines without arrows indicate that a higher-order object contains a slot with the associated class as one of its components.}
\label{fig:phyloseqclasses}
\end{center}
\end{figure}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Installation of development version.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Install Development Version}\label{sec:install}
For development version of the \emph{phyloseq} package when it is not yet available from Bioconductor, see the development homepage on GitHub (\code{https://github.com/joey711/phyloseq}). This is also the best place to post issues, bug reports, feature requests, etc. The most convenient way to install this and other R packages available on GitHub is to first make sure you have the latest R development tools installed (\emph{devtools} package), and then using the special github variant of the \code{install()} command, \code{install\_{}github()}. Step-by-step:

<<eval=FALSE>>=
  install.packages("devtools")
  library("devtools")
  install("ape")
  install("ggplot2")
  install("igraph")
  source("http://bioconductor.org/biocLite.R")
  biocLite("multtest")
  install("phylobase")
  install("picante")
  install("vegan")
  install_github("phyloseq", "joey711")
@

Note that the above instructions include installation of a number of additional packages upon which \emph{phyloseq} is dependent. This may take some time to install. If there is a portion of these initial instructions not working as listed, please notify me by e-mail or at the github page. For running parallel implementation of functions/methods in \emph{phyloseq} (e.g. parallel wUniFrac), you will need also to install the ``Rmpi'' package:
<<eval=FALSE>>=
  install("Rmpi")
@

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Bibliography.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\clearpage
\section{Bibliography}
%\bibliographystyle{ws-procs11x85}
%\bibliography{phyloseq_vignette}



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\end{document}